<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">
	<!-- 配置数据源 使用的是druid数据源 -->
	<bean name="defaultDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${mysql.initialSize}" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="${mysql.maxActive}" />
		
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${mysql.minIdle}" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${mysql.maxPoolPreparedStatementPerConnectionSize}" />
		<!-- 用来检测有效sql -->
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<!-- 监控数据库 -->
		<property name="filters" value="mergeStat" />
	</bean>
	
		<!-- 配置数据源 使用的是druid数据源 -->
	<bean name="statDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${stat.mysql.url}" />
		<property name="username" value="${stat.mysql.username}" />
		<property name="password" value="${stat.mysql.password}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="20" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="20" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${mysql.maxPoolPreparedStatementPerConnectionSize}" />
		<!-- 用来检测有效sql -->
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<!-- 监控数据库 -->
		<property name="filters" value="mergeStat" />
	</bean>
	
	<bean id="redisCacheDaoProxy" class="org.mybatis.spring.cache.RedisCacheDaoProxy">
		<property name="redisCacheService" ref="redisCacheService"></property>
		<property name="openCache" value="true"></property>
		<property name="logcacheKey" value="true"></property>
		<!-- 关闭通知 php
		<property name="updateListener" ref="rabbitMQService"></property>
		 -->
		<property name="sqlMaxTime" value="${mysql.sqlMaxTime}"></property>
	</bean>
	
	<bean id="mybatisPlugins" class="java.util.ArrayList">
		<constructor-arg>
			<list>
			<bean class="org.apache.ibatis.plugin.SqlMonitorManager">
				<property name="showSql" value="true"></property>
			</bean>
			</list>
		</constructor-arg>
	</bean>

	<bean id="defaultSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="defaultDataSource" />
		<property name="mapperLocations" value="classpath:org/mybatis/spring/datasource/mapping/*.xml" />
		<property name="mapperDelegateProxy" ref="redisCacheDaoProxy"></property>
		<property name="plugins" ref="mybatisPlugins"></property>
	</bean>
	
	<bean id="statSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="statDataSource" />
		<property name="mapperLocations" value="classpath:org/mybatis/spring/datasource/mapping/*.xml" />
		<property name="mapperDelegateProxy" ref="redisCacheDaoProxy"></property>
		<property name="plugins" ref="mybatisPlugins"></property>
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.datasource.SimpleSqlSessionTemplate">
        <constructor-arg ref="defaultSqlSessionFactory" />
        <property name="targetSqlSessionFactory">
            <map>     
                <entry value-ref="defaultSqlSessionFactory" key="main"/>
                <entry value-ref="statSqlSessionFactory" key="stat"/>
            </map> 
        </property>
    </bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="org.mybatis.spring.datasource.dao" />
		<property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate" />
	</bean>

	<bean id="transactionManager" class="org.mybatis.spring.cache.spring.BizTransactionManager">
		<property name="dataSource" ref="defaultDataSource"/>
		<property name="redisCacheService" ref="redisCacheService"/>
	</bean>
	
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" isolation="DEFAULT" />
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="transactionBusiness" expression="execution(@org.mybatis.spring.cache.spring.SimpleTransaction * *(..))" />
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionBusiness" />
	</aop:config>
	
</beans>